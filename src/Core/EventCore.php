<?phpnamespace Bfg\BlessModel\Core;/** * Class EventCore * @package Bfg\BlessModel\Core */class EventCore{    /**     * On Save event list     *     * @var callable[]     */    protected array $on_save = [];    /**     * On Saves event list     *     * @var callable[]     */    protected array $on_saved = [];    /**     * On Create event list     *     * @var callable[]     */    protected array $on_create = [];    /**     * On Created event list     *     * @var callable[]     */    protected array $on_created = [];    /**     * On Update event list     *     * @var callable[]     */    protected array $on_update = [];    /**     * On Updated event list     *     * @var callable[]     */    protected array $on_updated = [];    /**     * On Delete event list     *     * @var callable[]     */    protected array $on_delete = [];    /**     * On Deleted event list     *     * @var callable[]     */    protected array $on_deleted = [];    /**     * On Force Delete event list     *     * @var callable[]     */    protected array $on_force_delete = [];    /**     * On Force Deleted event list     *     * @var callable[]     */    protected array $on_force_deleted = [];    /**     * On Restore event list     *     * @var callable[]     */    protected array $on_restore = [];    /**     * On Restored event list     *     * @var callable[]     */    protected array $on_restored = [];    /**     * Call on event time     *     * @param  string  $name     * @param  string|object  $model     * @param  mixed  ...$params     * @return $this     */    public function call_on(string $name, string|object $model, ...$params): self    {        $event_name = "on_{$name}";        if (property_exists($this, $event_name)) {            if (is_object($model)) {                $model = get_class($model);            }            $events = $this->{$event_name}[$model] ?? [];            $events = array_merge($events, $this->{$event_name}['all'] ?? []);            foreach ($events as $event) {                call_user_func_array($event, $params);            }        }        return $this;    }    /**     * Add event on save     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_save(callable|string $model, callable $call = null): self    {        return $this->on('save', $model, $call);    }    /**     * Add event on saved     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_saved(callable|string $model, callable $call = null): self    {        return $this->on('saved', $model, $call);    }    /**     * Add event on create     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_create(callable|string $model, callable $call = null): self    {        return $this->on('create', $model, $call);    }    /**     * Add event on created     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_created(callable|string $model, callable $call = null): self    {        return $this->on('created', $model, $call);    }    /**     * Add event on update     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_update(callable|string $model, callable $call = null): self    {        return $this->on('update', $model, $call);    }    /**     * Add event on updated     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_updated(callable|string $model, callable $call = null): self    {        return $this->on('updated', $model, $call);    }    /**     * Add event on delete     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_delete(callable|string $model, callable $call = null): self    {        return $this->on('delete', $model, $call);    }    /**     * Add event on deleted     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_deleted(callable|string $model, callable $call = null): self    {        return $this->on('deleted', $model, $call);    }    /**     * Add event on force delete     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_force_delete(callable|string $model, callable $call = null): self    {        return $this->on('force_delete', $model, $call);    }    /**     * Add event on force deleted     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_force_deleted(callable|string $model, callable $call = null): self    {        return $this->on('force_deleted', $model, $call);    }    /**     * Add event on soft restore     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_restore(callable|string $model, callable $call = null): self    {        return $this->on('restore', $model, $call);    }    /**     * Add event on soft restored     *     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    public function on_restored(callable|string $model, callable $call = null): self    {        return $this->on('restored', $model, $call);    }    /**     * Make event     *     * @param  string  $event     * @param  callable|string  $model     * @param  callable|null  $call     * @return $this     */    protected function on(string $event, callable|string $model, callable $call = null): self    {        $event = "on_$event";        if (!is_string($model)) {            $call = $model;            $model = "all";        }        if ($model && property_exists($this, $event) && is_callable($call)) {            $events = $this->$event;            $events[$model][] = $call;            $this->$event = $events;        }        return $this;    }}